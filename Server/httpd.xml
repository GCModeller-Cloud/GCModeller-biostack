<?xml version="1.0"?>
<doc>
<assembly>
<name>
httpd
</name>
</assembly>
<members>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.APIMethod">
 <summary>
 In plain English, that means that GET is used for viewing something, without changing it, 
 while POST is used for changing something. 
 For example, a search page should use GET, while a form that changes your password should use POST.
 </summary>
</member>
<member name="M:SMRUCC.REST.AppEngine.APIMethods.APIMethod.__description(System.Type,System.String)">
 <summary>
 递归的直到找到最简单的数据类型
 </summary>
 <param name="typeDef"></param>
 <returns></returns>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.GET">
 <summary>
 GET when you want to retrieve data (GET DATA).
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.POST">
 <summary>
 POST when you want to send data (POST DATA). The POST method requests that the server accept the entity 
 enclosed In the request As a New subordinate Of the web resource identified by the URI. 
 The data POSTed might be, For example, an annotation For existing resources; a message For a bulletin board, 
 newsgroup, mailing list, Or comment thread; a block Of data that Is the result Of submitting a web form 
 To a data-handling process; Or an item To add To a database.[14]
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.HEAD">
 <summary>
 The HEAD method asks For a response identical To that Of a Get request, but without the response body. 
 This Is useful For retrieving meta-information written In response headers, without having To transport the entire content.
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.PUT">
 <summary>
 The PUT method requests that the enclosed entity be stored under the supplied URI. If the URI refers 
 To an already existing resource, it Is modified; If the URI does Not point To an existing resource, 
 Then the server can create the resource With that URI.[15]
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.DELETE">
 <summary>
 The DELETE method deletes the specified resource.
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.TRACE">
 <summary>
 The TRACE method echoes the received request so that a client can see what (If any) changes Or additions have been made by intermediate servers.
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.OPTIONS">
 <summary>
 The OPTIONS method returns the HTTP methods that the server supports For the specified URL. 
 This can be used To check the functionality Of a web server by requesting '*' instead of a specific resource.
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.CONNECT">
 <summary>
 The CONNECT method converts the request connection to a transparent TCP/IP tunnel, usually to facilitate 
 SSL-encrypted communication (HTTPS) through an unencrypted HTTP proxy.[17][18] See HTTP CONNECT tunneling.
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APIMethods.PATCH">
 <summary>
 The PATCH method applies Partial modifications To a resource.[19]
 </summary>
</member>
<member name="T:SMRUCC.REST.AppEngine.APPEngine">
 <summary>
 执行<see cref="T:SMRUCC.REST.AppEngine.WebApp"/>的工作引擎
 </summary>
</member>
<member name="F:SMRUCC.REST.AppEngine.APPEngine.API">
 <summary>
 必须按照从长到短来排序
 </summary>
</member>
<member name="M:SMRUCC.REST.AppEngine.APPEngine.Invoke(System.String,System.String,System.String@)">
 <summary>
 
 </summary>
 <param name="api">已经变小写了的</param>
 <param name="parameters"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.APPEngine.Invoke(System.String,System.IO.StreamReader,System.String@)">
 <summary>
 
 </summary>
 <param name="api">已经变小写了的</param>
 <param name="inputs"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.APPEngine.GetParameter(System.String,System.String@,System.String@,System.String@)">
 <summary>
 返回False标识无法正确的解析出调用数据
 </summary>
 <param name="url"></param>
 <param name="application"></param>
 <param name="API"></param>
 <param name="parameters"></param>
 <returns></returns>
</member>
<member name="F:SMRUCC.REST.AppEngine.APPManager.RunningAPP">
 <summary>
 键名要求是小写的
 </summary>
</member>
<member name="M:SMRUCC.REST.AppEngine.APPManager.InvokePOST(System.String,System.IO.StreamReader,System.String@)">
 <summary>
 
 </summary>
 <param name="url"></param>
 <param name="inputs"></param>
 <param name="result">HTML输出页面或者json数据</param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.APPManager.Invoke(System.String,System.String@)">
 <summary>
 
 </summary>
 <param name="url"></param>
 <param name="result">HTML输出页面或者json数据</param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.APPManager.Register``1(``0)">
 <summary>
 向开放平台之中注册API接口
 </summary>
 <typeparam name="APP"></typeparam>
 <param name="application"></param>
 <returns></returns>
</member>
<member name="T:SMRUCC.REST.AppEngine.ExternalCall">
 <summary>
 调用和注册外部模块为rest服务的插件，从这里拓展核心服务层
 </summary>
</member>
<member name="M:SMRUCC.REST.AppEngine.WebApp.Page404">
 <summary>
 404模板
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.ArgsMgr.GetFile(System.String)">
 <summary>
 
 </summary>
 <param name="name">可能会出现重名的现象</param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.ArgsMgr.#ctor(System.IO.StreamReader)">
 <summary>
 
 </summary>
 <param name="params">POST得到的数据</param>
</member>
<member name="P:SMRUCC.REST.AppEngine.Content.type">
 <summary>
 Content-Type: text/plain
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.Content.__contentType(System.String)">
 <summary>
 Content-Type: text/plain
 </summary>
 <param name="input"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.AppEngine.Content.__nameParser(System.String,System.String@,System.String@)">
 <summary>
 filename=".NETFramework,Version=v4.6.AssemblyAttributes.vb"
 </summary>
 <param name="input"></param>
 <param name="Name"></param>
 <param name="fileName"></param>
</member>
<member name="M:SMRUCC.REST.Platform.Plugins.PluginBase.handleVisit(SMRUCC.REST.HttpInternal.HttpProcessor,System.Boolean)">
 <summary>
 
 </summary>
 <param name="p"></param>
 <param name="success"></param>
</member>
<member name="T:SMRUCC.REST.Platform.PlatformEngine">
 <summary>
 服务基础类，REST API的开发需要引用当前的项目
 </summary>
</member>
<member name="M:SMRUCC.REST.Platform.PlatformEngine.#ctor(System.String,System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <param name="port"></param>
 <param name="root"></param>
 <param name="nullExists"></param>
</member>
<member name="M:SMRUCC.REST.Platform.PlatformEngine.__handleREST(SMRUCC.REST.HttpInternal.HttpProcessor)">
 <summary>
 GET
 </summary>
 <param name="p"></param>
</member>
<member name="P:SMRUCC.REST.Platform.TaskPool.NumThreads">
 <summary>
 允许同时运行的任务的数量
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.Platform.TaskPool.GetTask(System.String)">
 <summary>
 当不存在的时候，说明正在运行，或者已经运行完毕了
 </summary>
 <param name="uid"></param>
 <returns></returns>
</member>
<member name="P:SMRUCC.REST.Platform.Task.uid">
 <summary>
 任务的编号
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.Platform.Task.GetQueuePos">
 <summary>
 获取当前的这个任务对象在队列之中的等待位置
 </summary>
 <returns></returns>
</member>
<member name="T:SMRUCC.REST.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:SMRUCC.REST.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:SMRUCC.REST.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:SMRUCC.REST.HttpInternal.HttpFileSystem">
 <summary>
 不兼容IE和Edge浏览器???为什么会这样子？
 </summary>
</member>
<member name="F:SMRUCC.REST.HttpInternal.HttpFileSystem._virtualMappings">
 <summary>
 {url, mapping path}
 </summary>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpFileSystem.#ctor(System.Int32,System.String,System.Boolean)">
 <summary>
 
 </summary>
 <param name="port"></param>
 <param name="root"></param>
 <param name="nullExists"></param>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpFileSystem.__getMapDIR(System.String@)">
 <summary>
 长
 </summary>
 <param name="res"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpFileSystem.handleGETRequest(SMRUCC.REST.HttpInternal.HttpProcessor)">
 <summary>
 为什么不需要添加<see cref="M:SMRUCC.REST.HttpInternal.HttpProcessor.writeSuccess(System.String)"/>方法？？？
 </summary>
 <param name="p"></param>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpFileSystem.__handleREST(SMRUCC.REST.HttpInternal.HttpProcessor)">
 <summary>
 handle the GET/POST request at here
 </summary>
 <param name="p"></param>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpFileSystem.__transferData(SMRUCC.REST.HttpInternal.HttpProcessor,System.String,System.Byte[])">
 <summary>
 为什么不需要添加content-type说明？？
 </summary>
 <param name="p"></param>
 <param name="ext"></param>
 <param name="buf"></param>
</member>
<member name="T:SMRUCC.REST.HttpInternal.HttpServer">
 <summary>
 Internal http server core.
 </summary>
</member>
<member name="P:SMRUCC.REST.HttpInternal.HttpServer.LocalPort">
 <summary>
 The network data port of this internal http server listen.
 </summary>
 <returns></returns>
</member>
<member name="P:SMRUCC.REST.HttpInternal.HttpServer.IsRunning">
 <summary>
 Indicates this http server is running status or not. 
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpServer.#ctor(System.Int32,System.Boolean)">
 <summary>
 
 </summary>
 <param name="port">The network data port of this internal http server listen.</param>
 <param name="homeShowOnStart"></param>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpServer.Run">
 <summary>
 Running this http server. 
 NOTE: current thread will be blocked at here until the server core is shutdown. 
 (请注意，在服务器开启之后，当前的线程会被阻塞在这里)
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpServer.__httpProcessor(System.Net.Sockets.TcpClient)">
 <summary>
 New HttpProcessor(Client, Me) with {._404Page = "...."}
 </summary>
 <param name="client"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpServer.Shutdown">
 <summary>
 Shutdown this internal http server
 </summary>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpServer.handleGETRequest(SMRUCC.REST.HttpInternal.HttpProcessor)">
 <summary>
 
 </summary>
 <param name="p"></param>
 <example>
 
 If p.http_url.Equals("/Test.png") Then
     Dim fs As Stream = File.Open("../../Test.png", FileMode.Open)

     p.writeSuccess("image/png")
     fs.CopyTo(p.outputStream.BaseStream)
     p.outputStream.BaseStream.Flush()
 End If

  Console.WriteLine("request: {0}", p.http_url)
 
  p.writeSuccess()
  p.outputStream.WriteLine("&lt;html>&lt;body>&lt;h1>Shoal SystemsBiology Shell Language&lt;/h1>")
  p.outputStream.WriteLine("Current Time: " &amp; DateTime.Now.ToString())
  p.outputStream.WriteLine("url : {0}", p.http_url)

  p.outputStream.WriteLine("&lt;form method=post action=/local_wiki>")
  p.outputStream.WriteLine("&lt;input type=text name=SearchValue value=Keyword>")
  p.outputStream.WriteLine("&lt;input type=submit name=Invoker value=""Search"">")
  p.outputStream.WriteLine("&lt;/form>")
 
 </example>
</member>
<member name="P:SMRUCC.REST.HttpInternal.HttpProcessor.http_url">
 <summary>
 File location or GET/POST request arguments
 </summary>
 <returns></returns>
</member>
<member name="F:SMRUCC.REST.HttpInternal.HttpProcessor.MAX_POST_SIZE">
 <summary>
 10MB
 </summary>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.REST.HttpInternal.HttpProcessor.IsWWWRoot">
 <summary>
 If current request url is indicates the HTTP root:  index.html
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpProcessor.HandlePOSTRequest">
 <summary>
 This post data processing just reads everything into a memory stream.
 this is fine for smallish things, but for large stuff we should really
 hand an input stream to the request processor. However, the input stream 
 we hand him needs to let him see the "end of the stream" at this content 
 length, because otherwise he won't know when he's seen it all! 
 </summary>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.REST.HttpInternal.HttpProcessor._404Page">
 <summary>
 You can customize your 404 error page at here.
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.REST.HttpInternal.HttpProcessor.writeFailure(System.String)">
 <summary>
 404
 </summary>
</member>
</members>
</doc>
